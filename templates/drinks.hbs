<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="../assets/images/favicon.png" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css" />
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Lora:ital@1&family=Otomanopee+One&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css"
    integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />
  <link rel="stylesheet" href="../assets/styles/drinks.css" />
  <title>Drinks Search Page</title>
</head>

<body>
  <header>
    <!-- Navbar -->
    <nav class="navbar pb-3 pt-3" role="navigation" aria-label="main navigation">
      <div class="navbar-brand">
        <a class="navbar-item" href="../index.html">
          <i class="fas fa-glass-whiskey" style="color: rgb(17, 110, 163); font-size: 2.5rem">
            Recipe Finder</i>
        </a>
      </div>

      <div class="navbar-end">
        <div class="navbar-item">
          <div class="buttons">
            <a href="./food.html" id="food-search-button" class="button is-link"><strong>Search Food</strong></a>
            <a href="./drinks.html" id="drinks-search-button" class="button is-link"><strong>Search Drinks</strong></a>
          </div>
        </div>
      </div>
    </nav>
  </header>

  <main>
    <!-- Main -->
    <section class="hero is-medium is-dark" style="
      background-image: url(https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQH4RzkN01XXHi8c2Vq3Z4k4-kT_F8sELlI4g&s.jpg);
      background-size:cover;
      background-repeat: no-repeat;
      background-blend-mode: soft-light;">
      <div class="hero-body">
        <p class="title has-text-centered is-size-2 has-text-primary" id="drink-hero-banner">
          Drink Recipe Search
        </p>
        <p class="subtitle has-text-centered is-size-3" id="drink-hero-subtitle">
          Find the perfect cocktail in minutes!
        </p>
        <section class="section" id="drink-form">
          <form id="drink-search-form">
            <label class="has-text-primary is-size-3 mb-5" id="alcohol"><strong>Alcohol/Ingredient</strong></label>
            <input class="input" id="drink-ingredient" type="text" placeholder="Search by alcohol or ingredient" autocomplete="off">

            <label class="has-text-primary is-size-3" id="cocktail-name"><strong>Cocktail Name</strong></label>
            <input id="cocktail-search" class="input mb-5" type="text" placeholder="Search by cocktail name" autocomplete="off">

            <button class="button is-large is-fullwidth is-success mb-5" id="search-drinks"
              type="submit">Search</button>
          </form>
          <button class="button is-large is-fullwidth is-info" id="random-drinks" type="submit">IDK, Tell Me What to Drink!</button>
        </section>
      </div>
    </section>

    <div id="drink-modal" class="modal is-clipped">
      <div id="drink-modal-background" class="modal-background"></div>
      <div id="drink-modal-content-container" class="modal-content has-background-white py-5 px-5"></div>
      <button class="modal-close is-large" id="close-drink-modal" aria-label="close"></button>
    </div>
  </main>

  <section id="favorites-section" class="section">
    <h1 class="title has-text-centered" id="food-favorites">Favorites</h1>
    <h2 class="subtitle has-text-centered">
      Review your saved recipes <strong>here!</strong>
    </h2>
    <button id="clear-favorites" class="button is-danger" disabled>Clear Favorites</button>
    <div id="cards-container" class="columns is-multiline"></div>
  </section>

  <footer class="footer">
    <div class="content has-text-centered">
      <p>
        <strong>Skillet & Shaker</strong><br>Created by Chris, Tucker, Brad, and Nick.<br>
        <a href="https://github.com/likearollinson/recipe-finder"> GitHub Repo</a>.
      </p>
    </div>
  </footer>

  <script>
    // Variables from modal elements in drinks.html
    const drinkModal = document.querySelector("#drink-modal");
    const modalCloseBtn = document.querySelector("#close-drink-modal");
    const modalBg = document.querySelector("#drink-modal-background");
    const modalContentEl = document.querySelector("#drink-modal-content-container");

    // Variables from form elements
    const drinkSearchFormEl = document.querySelector("#drink-search-form");
    const randomDrinkSearchBtn = document.querySelector("#random-drinks");
    let drinkIngredientSearchInputEl = document.querySelector("#drink-ingredient");
    let cocktailNameSearchInputEl = document.querySelector("#cocktail-search");

    const clearFavoritesBtn = document.querySelector("#clear-favorites");
    const cardsContainer = document.querySelector("#cards-container");

    // Declare globally for use in multiple functions
    let drinkIngredient;

    // Set savedDrinks from local storage if available, and to an empty array if not
    let savedDrinks = JSON.parse(localStorage.getItem("userDrinkFavorites") || "[]");

    // Add event listeners to close modal
    modalBg.addEventListener("click", () => {
      drinkModal.classList.remove("is-active");
      modalContentEl.innerHTML = "";
    });

    modalCloseBtn.addEventListener("click", () => {
      drinkModal.classList.remove("is-active");
      modalContentEl.innerHTML = "";
    });

    // Add event listeners to make sure only one search parameter can be used (API limitation)
    drinkIngredientSearchInputEl.addEventListener("blur", function () {
      if (drinkIngredientSearchInputEl.value.trim().length !== 0) {
        cocktailNameSearchInputEl.disabled = true;
      } else {
        cocktailNameSearchInputEl.disabled = false;
      }
    });

    cocktailNameSearchInputEl.addEventListener("blur", function () {
      if (cocktailNameSearchInputEl.value.trim() !== "") {
        drinkIngredientSearchInputEl.disabled = true;
      } else {
        drinkIngredientSearchInputEl.disabled = false;
      }
    });

    // Search for drink recipes on form submit
    drinkSearchFormEl.addEventListener("submit", function (event) {
      event.preventDefault();
      drinkIngredient = drinkIngredientSearchInputEl.value.trim();
      cocktailName = cocktailNameSearchInputEl.value.trim();
      drinkIngredientSearchInputEl.value = "";
      cocktailNameSearchInputEl.value = "";
      drinkModal.classList.add("is-active");
      if (drinkIngredient) {
        getDrinkFromIngredient(drinkIngredient);
      } else if (cocktailName) {
        getDrinkFromName(cocktailName);
      }
    });

    // Search for random recipe
    randomDrinkSearchBtn.addEventListener("click", function (event) {
      event.preventDefault();
      drinkModal.classList.add("is-active");
      getRandomDrinkRecipe();
    });

    // Clear favorites button function
    clearFavoritesBtn.addEventListener("click", function (event) {
      event.preventDefault();
      localStorage.removeItem("userDrinkFavorites");
      savedDrinks = [];
      showFavorites(savedDrinks);
    });

    // URL for fetching drinks API data
    const drinkURL = "https://thecocktaildb.com/api/json/v1/1/";

    function getDrinkFromIngredient(drinkIngredient) {
      fetch(drinkURL + "filter.php?i=" + drinkIngredient)
        .then(function (response) {
          if (response.ok) {
            return response.json();
          }
        })
        .then(function (data) {
          if (data.count !== 0) {
            showDrinkRecipes(data.drinks);
          }
        })
        .catch(function (error) {
          console.log(error);
          invalidIngredient(drinkIngredient);
        });
    }

    function getDrinkFromName(cocktailName) {
      fetch(drinkURL + "search.php?s=" + cocktailName)
        .then(function (response) {
          if (response.ok) {
            return response.json();
          }
        })
        .then(function (data) {
          if (data.drinks) {
            showDrinkRecipes(data.drinks);
          }
        });
    }

    function showDrinkRecipes(drinks) {
      cardsContainer.innerHTML = "";
      drinks.forEach(function (drink) {
        const drinkCard = document.createElement("div");
        drinkCard.classList.add("column", "is-one-third", "is-3");
        drinkCard.classList.add("drink-card");
        const drinkHTML = `
            <div class="card">
              <div class="card-image">
                <figure class="image">
                  <img src="${drink.strDrinkThumb}" alt="Image of ${drink.strDrink}" />
                </figure>
              </div>
              <div class="card-content">
                <div class="media">
                  <div class="media-content">
                    <p class="title is-4">${drink.strDrink}</p>
                  </div>
                </div>
                <div class="content">
                  <button class="button is-link" data-drink-id="${drink.idDrink}">View Recipe</button>
                </div>
              </div>
            </div>`;
        drinkCard.innerHTML = drinkHTML;
        cardsContainer.appendChild(drinkCard);
      });
    }

    function invalidIngredient(ingredient) {
      cardsContainer.innerHTML = "";
      const errorMessage = document.createElement("p");
      errorMessage.textContent = `No drinks found for the ingredient "${ingredient}"`;
      cardsContainer.appendChild(errorMessage);
    }

    function getRandomDrinkRecipe() {
      fetch(drinkURL + "random.php")
        .then(function (response) {
          if (response.ok) {
            return response.json();
          }
        })
        .then(function (data) {
          const randomDrink = data.drinks[0];
          showDrinkRecipes([randomDrink]);
        });
    }

    // Show the favorites saved in local storage
    function showFavorites(favorites) {
      cardsContainer.innerHTML = "";
      if (favorites.length === 0) {
        const message = document.createElement("p");
        message.textContent = "You have no saved drinks yet.";
        cardsContainer.appendChild(message);
      } else {
        favorites.forEach((favorite) => {
          const favoriteCard = document.createElement("div");
          favoriteCard.classList.add("column", "is-one-third");
          favoriteCard.innerHTML = `
            <div class="card">
              <div class="card-image">
                <figure class="image">
                  <img src="${favorite.strDrinkThumb}" alt="Image of ${favorite.strDrink}" />
                </figure>
              </div>
              <div class="card-content">
                <div class="media">
                  <div class="media-content">
                    <p class="title is-4">${favorite.strDrink}</p>
                  </div>
                </div>
                <div class="content">
                  <button class="button is-link" data-drink-id="${favorite.idDrink}">View Recipe</button>
                </div>
              </div>
            </div>
          `;
          cardsContainer.appendChild(favoriteCard);
        });
      }
    }
  </script>
</body>

</html>
